// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package gen

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get current counter value
	// (GET /counter)
	GetCurrentCount(ctx echo.Context) error
	// Get current counter value
	// (POST /increment)
	IncrementCount(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCurrentCount converts echo context to params.
func (w *ServerInterfaceWrapper) GetCurrentCount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCurrentCount(ctx)
	return err
}

// IncrementCount converts echo context to params.
func (w *ServerInterfaceWrapper) IncrementCount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.IncrementCount(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/counter", wrapper.GetCurrentCount)
	router.POST(baseURL+"/increment", wrapper.IncrementCount)

}

type GetCurrentCountRequestObject struct {
}

type GetCurrentCountResponseObject interface {
	VisitGetCurrentCountResponse(w http.ResponseWriter) error
}

type GetCurrentCount200JSONResponse CounterResponse

func (response GetCurrentCount200JSONResponse) VisitGetCurrentCountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type IncrementCountRequestObject struct {
	Body *IncrementCountJSONRequestBody
}

type IncrementCountResponseObject interface {
	VisitIncrementCountResponse(w http.ResponseWriter) error
}

type IncrementCount200JSONResponse CounterResponse

func (response IncrementCount200JSONResponse) VisitIncrementCountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get current counter value
	// (GET /counter)
	GetCurrentCount(ctx context.Context, request GetCurrentCountRequestObject) (GetCurrentCountResponseObject, error)
	// Get current counter value
	// (POST /increment)
	IncrementCount(ctx context.Context, request IncrementCountRequestObject) (IncrementCountResponseObject, error)
}

type StrictHandlerFunc = runtime.StrictEchoHandlerFunc
type StrictMiddlewareFunc = runtime.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetCurrentCount operation middleware
func (sh *strictHandler) GetCurrentCount(ctx echo.Context) error {
	var request GetCurrentCountRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCurrentCount(ctx.Request().Context(), request.(GetCurrentCountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCurrentCount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCurrentCountResponseObject); ok {
		return validResponse.VisitGetCurrentCountResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// IncrementCount operation middleware
func (sh *strictHandler) IncrementCount(ctx echo.Context) error {
	var request IncrementCountRequestObject

	var body IncrementCountJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.IncrementCount(ctx.Request().Context(), request.(IncrementCountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "IncrementCount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(IncrementCountResponseObject); ok {
		return validResponse.VisitIncrementCountResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}
